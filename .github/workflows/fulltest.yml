name: Python CI

on: [push, pull_request]

jobs:
  test_and_check:
    runs-on: ubuntu-latest

    env:
      PYTHON_VERSION: 3.9
      SRC_DIRECTORY: ./src
      COVERAGE_XML: ${{ github.workspace }}/coverage.xml

    steps:
    # Checkout the repo
    - name: Checkout repository
      uses: actions/checkout@v2

    # Use a specific Python version
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    # Install packages for build
    - name: Install dependencies
      run: |
        pip install -r requirements.txt -U --upgrade-strategy eager
        pip install setuptools
        pip install flake8 pytest
        pip install pytest
        pip install pylint

    # Run flake8 lint tests
    - name: Run flake8 lint tests
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    # Check black code formatting
    - name: Check code formatting with Black
      run: |
        black --check --diff ${{ env.SRC_DIRECTORY }}

    # Sort imports using isort
    - name: Sort imports using isort
      run: |
        isort .

    # Run tests with coverage
    - name: Run tests with coverage
      run: |
        coverage run --source=${{ env.SRC_DIRECTORY }} -m pytest --junitxml=junit/test-results.xml
        coverage xml -o ${{ env.COVERAGE_XML }}

    # Checking Unit Test result
    - name: Checking Unit Test result
      run: |
        pytest --junitxml=junit/test-results.xml
        if [ $? -ne 0 ]; then
            echo "Some tests failed."
            exit 1
        fi

    # Fail pipeline if coverage is below 80%
    - name: Checking Code Coverage result
      run: |
        COVERAGE=$(coverage report | awk '/TOTAL/ {print substr($NF, 1, length($NF)-1)}')
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "Coverage is below 80% ($COVERAGE%), failing pipeline"
          exit 1
        fi
